// =================================================================
//
// Copyright (C) 2018 Spatial Current, Inc. - All Rights Reserved
// Released as open source under the MIT License.  See LICENSE file.
//
// =================================================================

package railgun

import (
  "reflect"
  "sync"
  "github.com/spatialcurrent/railgun/railgun/core"
)

type Catalog struct {
  mutex            *sync.Mutex
  objects map[string][]core.Base
  indices map[string]map[string]int
}

func NewCatalog() *Catalog {

	catalog := &Catalog{
		mutex: &sync.Mutex{},
		objects: map[string][]core.Base,
		indices: map[string]map[string]int{},
	}

	return config
}

func (c *Catalog) Lock() {
	c.mutex.Lock()
}

func (c *Catalog) Unlock() {
	c.mutex.Unlock()
}

func (c *Catalog) Get(name string, t reflect.Type) (interface{}, bool) {
  typeName := t.Name()
  if index, ok := c.indices[typeName]; ok {
    if position, ok := index[name]; ok {
      if objects, ok := c.objects[typeName]; ok {
        obj := reflect.ValueOf(objects).Index(position).Interface()
        if reflect.TypeOf(obj).AssignableTo(t) {
          return obj, nil
        }
      }
    }
  }
  return nil, false
}

func (c *Catalog) Add(obj interface{}) error {
  objectType := reflect.TypeOf(obj)
  typeName := objectType.Name()
  
  if _ , ok := c.objects[typeName]; ! ok {
    c.objects[typeName] = reflect.MakeSlice(reflect.SliceOf(objectType), 0, 0)
  }
  
  c.objects[typeName] = reflect.ValueOf(c.objects[typeName], reflect.ValueOf(obj))
  
  if nm, ok := obj.(NamedMapper); ok {
    if _ , ok := c.indices[typeName]; ! ok {
      c.indices[typeName] = map[string]int{}
    }
    if _, ok := c.indices[typeName][nm.Name()]; ok {
      return &railgunerrors.ErrAlreadyExists{Name: typeName, Value: nm.Name()}
    }
    c.indices[typeName][nm.Name()] = reflect.ValueOf(c.objects[typeName]).Len()
  }
  
  return nil
  
}

func (c *Catalog) Delete(name string, t reflect.Type) interface{} {
  typeName := t.Name()
  if index, ok := c.indices[typeName]; ok {
    if position, ok := index[name]; ok {
      if list, ok := c.objects[typeName]; ok {
        listValue := reflect.ValueOf(list)
        c.objects[typeName] = listValue.Slice(0, position).Append(listValue.Slice(position + 1, listValue.Len()))
        return c.objects[typeName]
      }
      delete(index, name)
    }
  }
  return nil, false
}

func (c *Catalog) List(t reflect.Type) interface{} {
  typeName := t.Name()
  if list, ok := c.objects[typeName]; ok {
    return list
  }
  return reflect.MakeSlice(reflect.SliceOf(t), 0, 0)
}

func (c *Catalog) Load(objects map[string]interface{}) {
  c.objects = objects
}

func (c *Catalog) SafeLoad(objects map[string]interface{}) {
  c.Lock()
  c.Load(objects)
  c.Unlock()
}

func (c *Catalog) Dump() map[string]interface{} {
  dump := map[string]interface{}{}
  for typeName, input := range c.objects {
    output := make([]map[string]interface{}, 0)
    objects := reflect.ValueOf(input)
    numberOfObjects := objects.Len()
    for i := 0; i < numberOfObjects; i++ {
      v := objects.Index(i).Interface()
      if m, ok := range v.(Mapper) {
        output = append(output, m.Map())
      }
    }
    dump[typeName] = output
  }
  return dump
}

func (c *Catalog) SafeDump() map[string]interface{} {
  c.Lock()
  dump := c.Dump()
  c.Unlock()
  return dump
}